@page "/GraphApiTestCalls"
@attribute [StreamRendering]
@inject GraphService GraphService
@rendermode @(new InteractiveServerRenderMode(false))
<PageTitle>Graph Api Test Calls</PageTitle>

<h1>Graph Api Test Calls</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button @onclick="UpdateRoles">Update Roles</button>
    <button @onclick="GetUserDetails">Get User Details with Additional Data</button>
    <br/>
   @*  <InputText id="@searchInput"></InputText> *@
    <button @onclick="SearchForMadhu">SearchForMadhu</button>
    <h5>for result Add breakpoint at Graphservice.cs and use as you wanted</h5>
    @if (user != null)
    {
        <h1>@user.DisplayName</h1>

    }
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    Microsoft.Graph.Models.User? user = null;
    string SearchResult = "";
    string searchInput = "";
    string userId = "32238262-b4ba-4328-909a-7bfdf1e13db0"; // Replace with the actual user object ID
    private async Task GetUserDetails()
    {
        Console.WriteLine("called");
        user = await GraphService.GetUserAsync(userId);
    }

    private async Task SearchForMadhu()
    {
        Console.WriteLine("called");
        var t11 = await GraphService.SearchWithFilterStartsWith("madhu", CancellationToken.None);
        if (t11 != null && t11.Count > 0)
        {
            user = t11.First();

        }

    }

    private async Task UpdateRoles()
    {
        Console.WriteLine("callesssd");
        string roles = "Admin,Editor";
        await GraphService.UpdateUserRolesAsync(userId, roles);
        await GetUserDetails();
    }

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        //await GetUserDetails();
        await GraphService.SearchWithFilterStartsWith("vmadhu",CancellationToken.None);
        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();

    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
